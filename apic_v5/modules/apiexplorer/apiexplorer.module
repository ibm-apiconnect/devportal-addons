<?php

/**
 * Implements hook_preprocess_node().
 *
 * This is where we do all the actual work to load Explorer and feed through the right data
 *
 * @param $variables
 */
function apiexplorer_preprocess_node(&$variables) {
  global $user;
  global $language;

  if ($variables['node']->type == 'api' && $variables['view_mode'] == 'inner') {
    // ensure the right template is loaded
    $variables['theme_hook_suggestions'][] = 'node__api__inner';

    // set up page config needed for explorer
    if (isset($user->uid)) {
      // need fully populated user object
      $user = user_load($user->uid);
    }
    $codesnippets = array(
      'curl' => variable_get('ibm_apim_codesnippets_curl', 1),
      'ruby' => variable_get('ibm_apim_codesnippets_ruby', 1),
      'python' => variable_get('ibm_apim_codesnippets_python', 1),
      'php' => variable_get('ibm_apim_codesnippets_php', 1),
      'java' => variable_get('ibm_apim_codesnippets_java', 1),
      'node' => variable_get('ibm_apim_codesnippets_node', 1),
      'go' => variable_get('ibm_apim_codesnippets_go', 1),
      'swift' => variable_get('ibm_apim_codesnippets_swift', 1),
      'c' => variable_get('ibm_apim_codesnippets_c', 0),
      'csharp' => variable_get('ibm_apim_codesnippets_csharp', 0)
    );
    $first_enabled = NULL;
    $codesnippet_langs = array();
    foreach ($codesnippets as $lang => $enabled) {
      if ($enabled) {
        $codesnippet_langs[] = $lang;
        if ($first_enabled === NULL) {
          $first_enabled = $lang;
        }
      }
    }

    // if user has set a preference and its an enabled language then honour it
    if (isset($user->uid) && isset($user->field_codesnippet['und'][0]['value'])) {
      $default_codesnippet_lang = $user->field_codesnippet['und'][0]['value'];
    }
    // if user's default lang not set or is not one of the enabled ones then default to first enabled
    if (!isset($default_codesnippet_lang) || empty($default_codesnippet_lang) || !in_array($default_codesnippet_lang, $codesnippet_langs)) {
      $default_codesnippet_lang = $first_enabled;
    }
    // Get the actual OpenAPI document
    $api = NULL;
    if (isset($variables['api_resources']['und'])) {
      $api = unserialize($variables['api_resources']['und'][0]['value']);
    }
    else {
      $api = unserialize($variables['api_resources'][0]['value']);
    }
    if (isset($api) && !empty($api)) {
      $api = apiexplorer_remove_empty_elements($api);
    }
    // get list of current apps
    $applications = array();
    if (user_is_logged_in() && $user->uid != 1) {
      if (module_exists('application')) {
        $query = new EntityFieldQuery();
        $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'application')
          ->fieldCondition('application_orgid', 'value', ibm_apim_get_current_developer_org()['id']);
        $results = $query->execute();
        if (isset($results['node'])) {
          $nids = array();
          foreach ($results['node'] as $item) {
            $nids[] = $item->nid;
          }
          $nodes = node_load_multiple($nids);
          foreach ($nodes as $node) {
            $credentials = array();
            $node_appCredentials = unserialize($node->application_credentials[$node->language][0]['value']);
            if (isset($node_appCredentials) && !empty($node_appCredentials)) {
              foreach ($node_appCredentials as $cred) {
                $credentials[] = array(
                  'client_id' => $cred['client-id'],
                  'description' => $cred['description']
                );
              }
              $redirectUris = array();
              if (isset($node->application_oauthredirecturi[$node->language][0]['value'])) {
                $redirectUris = array_filter(preg_split('/\n|\r\n?/', trim($node->application_oauthredirecturi[$node->language][0]['value'])));
              }
              $applications[] = array(
                'name' => $node->title,
                'summary' => $node->application_description[$node->language][0]['value'],
                'redirectUri' => $redirectUris,
                'credentials' => $credentials,
              );
            }
          }
        }
      }
    }
    $infoSectionEntries = array();
    // also include any attached files such as WSDLs
    if (isset($variables['api_attachments'])) {
      $output = drupal_render(field_view_field('node', $variables['node'], 'api_attachments'));
      $location = 'OVERVIEW';
      $infoSectionEntries[] = array(
        'class' => 'Documentation',
        'html' => $output,
        'location' => $location
      );
    }

    $options = array(
      'showApiVersion' => (boolean) variable_get('ibm_apim_show_versions', TRUE),
      'showCorsWarnings' => 1,
      'showSoapSwaggerDownload' => (boolean) variable_get('ibm_apim_soap_swagger_download', FALSE),
      'showSoapCodeSnippets' => (boolean) variable_get('ibm_apim_soap_codesnippets', FALSE),
      'languages' => $codesnippet_langs,
      'defaultLanguage' => $default_codesnippet_lang,
      'tryIt' => (boolean) variable_get('ibm_apim_enable_api_test', TRUE),
      'showMTLSHeader' => (boolean) variable_get('ibm_apim_show_mtls_header', TRUE),
      'onReady' => 'portalExplorerReady',
      'explorerDir' => base_path() . drupal_get_path('module', 'apiexplorer') . '/explorer/app/',
      'locale' => _ibm_apim_convert_lang_name($language->language),
      'loggedIn' => user_is_logged_in(),
      'loginLink' => base_path() . 'user/login',
      'isApicPortal' => TRUE,
      'apicPortalUserId' => $user->uid,
      'apicPortalNewAppLink' => base_path() . 'application/new',
      'optimiseOauthUX' => TRUE,
    );

    if (isset($infoSectionEntries) && !empty($infoSectionEntries)) {
      $options['infoSectionEntries'] = array($infoSectionEntries);
    }

    // Feed data through to the explorer JS from PHP via DrupalSettings
    drupal_add_js(array(
      'api' => array(
        'explorer' => array(
          'apis' => array($api),
          'apps' => $applications,
          'options' => $options
        )
      ),
    ), 'setting');

    // load the explorer JS and CSS
    if (file_exists(drupal_get_path('module', 'apiexplorer') . '/explorer/app/asset-manifest.json')) {
      $string = file_get_contents(drupal_get_path('module', 'apiexplorer') . '/explorer/app/asset-manifest.json');
      $json = json_decode($string, TRUE);
      if (isset($json['main.js']) && file_get_contents(drupal_get_path('module', 'apiexplorer') . '/explorer/app/' . $json['main.js'])) {
        drupal_add_js(drupal_get_path('module', 'apiexplorer') . '/explorer/app/' . $json['main.js'], array(
          'weight' => 3,
          'minified' => TRUE,
          'preprocess' => FALSE
        ));
        drupal_add_css(drupal_get_path('module', 'apiexplorer') . '/explorer/app/css/explorer.css');
      }
    }
  }
}

/**
 * Implementation of hook_theme().
 *
 * Tell Drupal that we have template files for the content types that we define in the module.
 * A theme can override these template files if it wishes to do so, but we include them
 * in our module so that the nodes render correctly when used with a theme that doesn't know
 * about them.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function apiexplorer_theme($existing, $type, $theme, $path) {
  $theme = array();
  $templates_path = drupal_get_path('module', 'apiexplorer') . '/templates';
  $theme['node__api'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api',
    'path' => $templates_path
  );
  $theme['node__api__inner'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api--inner',
    'path' => $templates_path
  );

  return $theme;
}


/**
 * We need our module to run last so we can override what the 'api' module does
 *
 * @param $implementations
 * @param $hook
 */
function apiexplorer_module_implements_alter(&$implementations, $hook) {
  if (isset($implementations['apiexplorer'])) {
    $group = $implementations['apiexplorer'];
    unset($implementations['apiexplorer']);
    $implementations['apiexplorer'] = $group;
  }
}

/**
 * This function exists to avoid issues caused by the json {} and [] looking the same in PHP!
 * Only option is to remove them from the structure.
 *
 * @param $yaml
 * @return mixed
 */
function apiexplorer_remove_empty_elements($yaml) {
  if (isset($yaml)) {
    // if empty securityDefinitions and others then needs to be stdClass not array
    foreach (array(
               'securityDefinitions',
               'responses',
               'parameters',
               'definitions',
               'paths',
               'contact',
               'license'
             ) as $key) {
      if (isset($yaml[$key])) {
        if (is_array($yaml[$key]) && empty($yaml[$key])) {
          unset($yaml[$key]);
        }
        elseif (is_array($yaml[$key])) {
          $yaml[$key] = apiexplorer_tidyYaml($yaml[$key]);
        }
      }
    }
    if (isset($yaml['paths'])) {
      foreach ($yaml['paths'] as $pathName => $path) {
        if (is_array($yaml['paths'][$pathName]) && empty($yaml['paths'][$pathName])) {
          unset($yaml['paths'][$pathName]);
        }
        else {
          foreach ($path as $verb => $op) {
            if (isset($op['responses'])) {
              foreach ($op['responses'] as $code => $response) {
                $yaml['paths'][$pathName][$verb]['responses'][$code] = apiexplorer_tidyYaml($yaml['paths'][$pathName][$verb]['responses'][$code]);
              }
            }
          }
        }
      }
    }
    // remove empty security requirements too
    if (isset($yaml['security'])) {
      foreach ($yaml['security'] as $key => $security) {
        if (is_array($yaml['security'][$key]) && empty($yaml['security'][$key])) {
          unset($yaml['security'][$key]);
        }
      }
    }
    // remove empty contact
    if (isset($yaml['info']['contact']) && is_array($yaml['info']['contact']) && empty($yaml['info']['contact'])) {
      unset($yaml['info']['contact']);
    }
  }
  return $yaml;
}

/**
 * Utility method to recurse through the yaml doc and tidy up trailing empty objects / empty arrays
 *
 * @param $yaml
 * @return array
 */
function apiexplorer_tidyYaml(&$yaml) {
  unset($prop);
  if (is_array($yaml)) {
    foreach ($yaml as $prop => $value) {
      if ($prop == 'schema') {
        if (is_array($yaml[$prop]) && empty($yaml[$prop])) {
          unset($yaml[$prop]);
        }
        elseif (is_array($yaml[$prop])) {
          $yaml[$prop] = apiexplorer_tidyYaml($yaml[$prop]);
        }
      }
      elseif ($prop == 'properties') {
        if (is_array($yaml[$prop]) && empty($yaml[$prop])) {
          unset($yaml[$prop]);
          // handle empty objects now we've removed possibly their only attribute
          if (is_array($yaml) && empty($yaml)) {
            $yaml['type'] = 'object';
          }
        }
        elseif (is_array($yaml[$prop])) {
          $yaml[$prop] = apiexplorer_tidyYaml($yaml[$prop]);
        }
      }
      elseif (is_array($yaml[$prop])) {
        $yaml[$prop] = apiexplorer_tidyYaml($yaml[$prop]);
      }
    }
  }
  return $yaml;
}
